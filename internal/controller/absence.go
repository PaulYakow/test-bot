package controller

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/vitaliy-ukiru/fsm-telebot"
	tele "gopkg.in/telebot.v3"

	_ "github.com/go-playground/validator/v10"

	"github.com/PaulYakow/test-bot/internal/model"
)

/*
user_id bigint NOT NULL - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é (+ —Ç–∞–±–µ–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
"type" absence_code NOT NULL - –≤—ã–≥—Ä—É–∂–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
date_begin date NOT NULL -
date_end date - –º–æ–∂–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ–∑–∂–µ (–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–ø—É—Å–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–Ω–æ–ø–∫–µ)

–í–Ω–∞—á–∞–ª–µ –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–ø–æ –∑–∞–ø—Ä–æ—Å—É), –≤ –∫–æ—Ç–æ—Ä—ã—Ö date_end IS NULL - –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è date_end (—Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –Ω–µ–º—É)
*/

var (
	absenceAddRecordBtn      = tele.Btn{Text: "üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", Unique: "absence_add_record"}
	absenceEditRecordBtn     = tele.Btn{Text: "üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å", Unique: "absence_edit_record"}
	absenceUserConfirmBtn    = tele.Btn{Unique: "absence_confirm_user"}
	absenceCodeConfirmBtn    = tele.Btn{Unique: "absence_confirm_code"}
	absenceSkipEndBtn        = tele.Btn{Text: "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}
	absenceRestartProcessBtn = tele.Btn{Text: "‚úÖ –î–∞", Unique: "absence_restart_process"}
	absenceCancelProcessBtn  = tele.Btn{Text: "‚ùå –ù–µ—Ç", Unique: "absence_cancel_process"}

	// absenceSG - –≥—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π absence (–ø—Ä–µ—Ñ–∏–∫—Å). –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.
	absenceSG = fsm.NewStateGroup("absence")

	// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
	absenceSelectActionState = absenceSG.New("select_action")
	absenceInputUserState    = absenceSG.New("input_user")
	absenceSelectUserState   = absenceSG.New("select_user")
	absenceNoUserState       = absenceSG.New("no_user")
	absenceSelectRecordState = absenceSG.New("select_record")
	absenceSelectCodeState   = absenceSG.New("select_code")
	absenceBeginState        = absenceSG.New("begin")
	absenceEndState          = absenceSG.New("end")
	absenceConfirmState      = absenceSG.New("confirm")

	absenceLastNameKey = absenceSG.Prefix + "@last_name"
	absenceUserIDKey   = absenceSG.Prefix + "@user_id"
	absenceCodeKey     = absenceSelectCodeState.GoString()
	absenceBeginKey    = absenceBeginState.GoString()
	absenceEndKey      = absenceEndState.GoString()
)

func (c *controller) absenceProcessInit() {
	c.manager.Bind(&absenceAddRecordBtn, absenceSelectActionState, absenceAddRecordHandler, deleteAfterHandler)
	c.manager.Bind(&absenceEditRecordBtn, absenceSelectActionState, absenceEditRecordHandler, deleteAfterHandler)

	c.manager.Bind(tele.OnText, absenceInputUserState, c.absenceInputUserHandler)

	c.manager.Bind(&absenceRestartProcessBtn, absenceNoUserState, absenceAddRecordHandler, deleteAfterHandler)
	c.manager.Bind(&absenceCancelProcessBtn, absenceNoUserState, cancelHandler, deleteAfterHandler)

	c.manager.Bind(&absenceUserConfirmBtn, absenceSelectUserState, c.absenceConfirmUserHandler, deleteAfterHandler)

	c.manager.Bind(tele.OnText, absenceSelectRecordState, absenceSelectRecordHandler)

	c.manager.Bind(&absenceCodeConfirmBtn, absenceSelectCodeState, absenceConfirmCodeHandler, deleteAfterHandler)

	c.manager.Bind(tele.OnText, absenceBeginState, absenceBeginHandler)

	c.manager.Bind(tele.OnText, absenceEndState, c.absenceEndHandler)
	c.manager.Bind(&absenceSkipEndBtn, absenceEndState, c.absenceSkipEndHandler)

	c.manager.Bind(&confirmBtn, absenceConfirmState, c.absenceConfirmHandler, deleteAfterHandler)
	c.manager.Bind(&resetBtn, absenceConfirmState, absenceResetHandler)
	c.manager.Bind(&cancelBtn, absenceConfirmState, cancelHandler, deleteAfterHandler)
}

func startAbsenceHandler(tc tele.Context, state fsm.Context) error {
	rm := &tele.ReplyMarkup{}
	rm.Inline(
		rm.Row(absenceAddRecordBtn),
		rm.Row(absenceEditRecordBtn),
	)

	rm.ResizeKeyboard = true
	rm.OneTimeKeyboard = true

	state.Set(absenceSelectActionState)
	return tc.Send("‚ùï<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>‚ùï", rm)
}

func absenceAddRecordHandler(tc tele.Context, state fsm.Context) error {
	go state.Set(absenceInputUserState)
	return tc.Send(
		`–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (–ª–∏–±–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–º–∏–ª–∏–∏) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
<i>–†–µ–≥–∏—Å—Ç—Ä –≤–≤–æ–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.</i>`,
		replyMarkupWithCancel())
}

func (c *controller) absenceInputUserHandler(tc tele.Context, state fsm.Context) error {
	lastName := tc.Message().Text

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:
	// 0 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (absenceNoUserState)
	// =1 - –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (absenceSelectCodeState)
	// >1 - –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (absenceSelectUserHandler)
	count, err := c.user.NumberWithSpecifiedLastName(context.Background(), lastName)
	if err != nil {
		tc.Bot().OnError(err, tc)
		state.Finish(true)
		return tc.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î")
	}

	switch count {
	case 0:
		state.Update(absenceLastNameKey, lastName)
		go state.Set(absenceNoUserState)
		return absenceNoUserHandler(tc, state)
	case 1:
		id, err := c.user.IDWithSpecifiedLastName(context.Background(), lastName)
		if err != nil {
			tc.Bot().OnError(err, tc)
			state.Finish(true)
			return tc.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î")
		}

		state.Update(absenceUserIDKey, id)
		go state.Set(absenceSelectCodeState)
		return c.absenceSelectCodeHandler(tc, state)
	default:
		state.Update(absenceLastNameKey, lastName)
		go state.Set(absenceSelectUserState)
		return c.absenceSelectUserHandler(tc, state)
	}
}

func absenceNoUserHandler(tc tele.Context, state fsm.Context) error {
	rm := &tele.ReplyMarkup{}
	rm.Inline(
		rm.Row(absenceRestartProcessBtn, absenceCancelProcessBtn),
	)
	rm.ResizeKeyboard = true
	rm.OneTimeKeyboard = true

	var lastName string
	state.MustGet(absenceLastNameKey, &lastName)

	return tc.Send(
		fmt.Sprintf(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ñ–∞–º–∏–ª–∏–µ–π (–ª–∏–±–æ —á–∞—Å—Ç—å—é —Ñ–∞–º–∏–ª–∏–∏) %q –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫?`,
			lastName),
		rm)
}

func (c *controller) absenceSelectUserHandler(tc tele.Context, state fsm.Context) error {
	var lastName string
	state.MustGet(absenceLastNameKey, &lastName)

	usersInfo, err := c.user.ListWithSpecifiedLastName(context.Background(), lastName)
	if err != nil {
		tc.Bot().OnError(err, tc)
		// TODO: –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥?
		state.Finish(true)
		return tc.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ë–î")
	}

	rm := &tele.ReplyMarkup{}
	rows := make([]tele.Row, len(usersInfo))
	for i, info := range usersInfo {
		absenceUserConfirmBtn.Text = info.Description
		absenceUserConfirmBtn.Data = info.ID
		rows[i] = rm.Row(absenceUserConfirmBtn)
	}
	rm.Inline(rows...)
	rm.ResizeKeyboard = true
	rm.OneTimeKeyboard = true

	return tc.Send(`‚ùóÔ∏è –ù–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ:`,
		rm)
}

func (c *controller) absenceConfirmUserHandler(tc tele.Context, state fsm.Context) error {
	data := tc.Callback().Data
	id, _ := strconv.ParseUint(data, 10, 64)

	go state.Update(absenceUserIDKey, id)
	go state.Set(absenceSelectCodeState)
	return c.absenceSelectCodeHandler(tc, state)
}

func absenceEditRecordHandler(tc tele.Context, state fsm.Context) error {
	// TODO: –Ω–µ–æ–±—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫), –≤ –∫–æ—Ç–æ—Ä—ã—Ö date_end IS NULL: "–§–∞–º–∏–ª–∏—è –ò.–û. - –ü—Ä–∏—á–∏–Ω–∞ (–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞)"

	return nil
}

func absenceSelectRecordHandler(tc tele.Context, state fsm.Context) error {
	return nil
}

func (c *controller) absenceSelectCodeHandler(tc tele.Context, state fsm.Context) error {
	absenceCodes, err := c.absence.ListCodes(context.Background())
	if err != nil {
		tc.Bot().OnError(err, tc)
		state.Finish(true)
		return tc.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω –Ω–µ—è–≤–æ–∫ –∏–∑ –ë–î")
	}

	btns := make([]tele.Btn, len(absenceCodes))
	for i, code := range absenceCodes {
		absenceCodeConfirmBtn.Text = code
		absenceCodeConfirmBtn.Data = code
		btns[i] = absenceCodeConfirmBtn
	}
	rm := &tele.ReplyMarkup{}
	rm.Inline(rm.Split(len(btns)/2, btns)...)
	rm.ResizeKeyboard = true

	return tc.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–µ—è–≤–∫–∏", rm)
}

func absenceConfirmCodeHandler(tc tele.Context, state fsm.Context) error {
	data := tc.Callback().Data
	go state.Update(absenceCodeKey, data)

	go state.Set(absenceBeginState)
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)")
}

// TODO: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
func absenceBeginHandler(tc tele.Context, state fsm.Context) error {
	rm := replyMarkupWithCancel()
	rm.Reply(rm.Row(absenceSkipEndBtn))

	input := tc.Message().Text
	go state.Update(absenceBeginKey, input)

	go state.Set(absenceEndState)
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)", rm)
}

// TODO: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
func (c *controller) absenceEndHandler(tc tele.Context, state fsm.Context) error {
	input := tc.Message().Text
	go state.Update(absenceEndKey, input)

	go state.Set(absenceConfirmState)
	return c.absenceCheckData(tc, state, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã.")
}

func (c *controller) absenceSkipEndHandler(tc tele.Context, state fsm.Context) error {
	go state.Set(absenceConfirmState)
	return c.absenceCheckData(tc, state,
		`‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.
–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã.`)
}

func (c *controller) absenceCheckData(tc tele.Context, state fsm.Context, msg string) error {
	a := absenceFromStateStorage(state)

	info, err := c.user.InfoWithSpecifiedID(context.Background(), a.UserID)
	if err != nil {
		tc.Bot().OnError(err, tc)
		state.Finish(true)
		return tc.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î")
	}

	return tc.Send(fmt.Sprintf(
		`%s

<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</i>: %q
<i>–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—è–≤–∫–∏</i>: %q
<i>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</i>: %v
<i>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>: %v`,
		msg,
		info,
		a.Code,
		a.DateBegin.Format(dateLayout),
		a.DateEnd.Format(dateLayout),
	),
		replyMarkupForConfirmState())

}

func (c *controller) absenceConfirmHandler(tc tele.Context, state fsm.Context) error {
	defer state.Finish(true)

	id, err := c.absence.Add(context.Background(), absenceFromStateStorage(state))
	if err != nil {
		tc.Bot().OnError(err, tc)
		return tc.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err))
	}

	return tc.Send(fmt.Sprintf("–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. ID –∑–∞–ø–∏—Å–∏: %d", id), tele.RemoveKeyboard)
}

func absenceResetHandler(tc tele.Context, state fsm.Context) error {
	go state.Set(absenceInputUserState)
	return tc.Send(`–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.
–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
`)
}

func absenceFromStateStorage(state fsm.Context) model.Absence {
	var (
		userID    uint64
		code      string
		dateBegin time.Time
		dateEnd   time.Time
	)

	state.MustGet(absenceUserIDKey, &userID)
	state.MustGet(absenceCodeKey, &code)
	state.MustGet(absenceBeginKey, &dateBegin)
	state.MustGet(absenceEndKey, &dateEnd)

	log.Printf("add absence: from state storage %v %v %v %v\n", userID, code, dateBegin, dateEnd)

	return model.Absence{
		UserID:    userID,
		Code:      code,
		DateBegin: dateBegin,
		DateEnd:   dateEnd,
	}
}
