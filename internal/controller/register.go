package controller

import (
	"fmt"
	"strconv"
	"time"

	"github.com/vitaliy-ukiru/fsm-telebot"
	tele "gopkg.in/telebot.v3"
)

const (
	dateLayout       = "02.01.2006"
	lastNameKey      = "last_name"
	firstNameKey     = "first_name"
	middleNameKey    = "middle_name"
	birthdayKey      = "birthday"
	positionKey      = "position"
	serviceNumberKey = "service_number"
)

var (
	// RegisterSG - –≥—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π reg (–ø—Ä–µ—Ñ–∏–∫—Å). –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	RegisterSG = fsm.NewStateGroup("reg")

	// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	RegisterLastNameState      = RegisterSG.New(lastNameKey)
	RegisterFirstNameState     = RegisterSG.New(firstNameKey)
	RegisterMiddleNameState    = RegisterSG.New(middleNameKey)
	RegisterBirthdayState      = RegisterSG.New(birthdayKey)
	RegisterPositionState      = RegisterSG.New(positionKey)
	RegisterServiceNumberState = RegisterSG.New(serviceNumberKey)
	RegisterConfirmState       = RegisterSG.New("confirm")

	// –ö–Ω–æ–ø–∫–∏ –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∑–∞–ø—É—Å–∫, –æ—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ)
	//regBtn    = tele.Btn{Text: "üìù –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
	cancelBtn = tele.Btn{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}

	// –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	confirmRegisterBtn = tele.Btn{Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", Unique: "confirm"}
	resetRegisterBtn   = tele.Btn{Text: "üîÑ –°–±—Ä–æ—Å–∏—Ç—å", Unique: "reset"}
	cancelRegisterBtn  = tele.Btn{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", Unique: "cancel"}
)

func (c *controller) registerProcessInit() {
	// Buttons
	//c.manager.Bind(&regBtn, fsm.DefaultState, StartRegisterHandler)
	c.manager.Bind(&cancelBtn, fsm.AnyState, cancelRegisterHandler)

	// User add process
	c.manager.Bind(tele.OnText, RegisterLastNameState, registerLastNameHandler)
	c.manager.Bind(tele.OnText, RegisterFirstNameState, registerFirstNameHandler)
	c.manager.Bind(tele.OnText, RegisterMiddleNameState, registerMiddleNameHandler)
	c.manager.Bind(tele.OnText, RegisterBirthdayState, registerBirthdayHandler)
	c.manager.Bind(tele.OnText, RegisterPositionState, registerPositionHandler)
	c.manager.Bind(tele.OnText, RegisterServiceNumberState, registerServiceNumberHandler)
	c.manager.Bind(&confirmRegisterBtn, RegisterConfirmState, registerConfirmHandler, editFormMessage("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ", "–í–≤–µ–¥—ë–Ω–Ω—ã–µ"))
	c.manager.Bind(&resetRegisterBtn, RegisterConfirmState, registerResetHandler, editFormMessage("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ", "–°—Ç–∞—Ä—ã–µ"))
	c.manager.Bind(&cancelRegisterBtn, RegisterConfirmState, cancelRegisterHandler, deleteAfterHandler)
}

func startRegisterHandler(tc tele.Context, state fsm.Context) error {
	menu := &tele.ReplyMarkup{}
	menu.Reply(menu.Row(cancelBtn))
	menu.ResizeKeyboard = true

	fmt.Println("start handler:", state.Set(RegisterLastNameState))
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", menu)
}

func registerLastNameHandler(tc tele.Context, state fsm.Context) error {
	input := tc.Message().Text
	go state.Update(lastNameKey, input)

	go fmt.Println("last_name handler:", state.Set(RegisterFirstNameState))
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
}

func registerFirstNameHandler(tc tele.Context, state fsm.Context) error {
	input := tc.Message().Text
	go state.Update(firstNameKey, input)

	go fmt.Println("first_name handler:", state.Set(RegisterMiddleNameState))
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
}

func registerMiddleNameHandler(tc tele.Context, state fsm.Context) error {
	input := tc.Message().Text
	go state.Update(middleNameKey, input)

	go fmt.Println("middle_name handler:", state.Set(RegisterBirthdayState))
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)")
}

func registerBirthdayHandler(tc tele.Context, state fsm.Context) error {
	input, err := time.Parse(dateLayout, tc.Message().Text)
	if err != nil {
		return tc.Send("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2001)")
	}
	go state.Update(birthdayKey, input)

	go state.Set(RegisterPositionState)
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
}

func registerPositionHandler(tc tele.Context, state fsm.Context) error {
	input := tc.Message().Text
	go state.Update(positionKey, input)

	go state.Set(RegisterServiceNumberState)
	return tc.Send("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
}

func registerServiceNumberHandler(tc tele.Context, state fsm.Context) error {
	serviceNumber, err := strconv.Atoi(tc.Message().Text)
	if err != nil || serviceNumber <= 0 {
		return tc.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
	}
	go state.Update(serviceNumberKey, serviceNumber)

	go state.Set(RegisterConfirmState)

	reply := &tele.ReplyMarkup{}
	reply.Inline(
		reply.Row(confirmRegisterBtn),
		reply.Row(resetRegisterBtn, cancelRegisterBtn),
	)

	var (
		lastName   string
		firstName  string
		middleName string
		birthday   time.Time
		position   string
	)
	state.MustGet(lastNameKey, &lastName)
	state.MustGet(firstNameKey, &firstName)
	state.MustGet(middleNameKey, &middleName)
	state.MustGet(birthdayKey, &birthday)
	state.MustGet(positionKey, &position)

	return tc.Send(fmt.Sprintf(
		`<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>
<i>–§–∞–º–∏–ª–∏—è</i>: %q
<i>–ò–º—è</i>: %d
<i>–û—Ç—á–µ—Å—Ç–≤–æ</i>: %q
<i>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</i>: %v
<i>–î–æ–ª–∂–Ω–æ—Å—Ç—å</i>: %q
<i>–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</i>: %d`,
		lastName,
		firstName,
		middleName,
		birthday,
		position,
		serviceNumber,
	), reply)
}

func registerConfirmHandler(tc tele.Context, state fsm.Context) error {
	defer state.Finish(true)

	var (
		lastName   string
		firstName  string
		middleName string
		birthday   time.Time
		position   string
	)
	state.MustGet(lastNameKey, &lastName)
	state.MustGet(firstNameKey, &firstName)
	state.MustGet(middleNameKey, &middleName)
	state.MustGet(birthdayKey, &birthday)
	state.MustGet(positionKey, &position)

	// TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
	//if err != nil {
	//	tc.Bot().OnError(err, tc)
	//}
	return tc.Send("–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã", tele.RemoveKeyboard)
}

func registerResetHandler(tc tele.Context, state fsm.Context) error {
	go state.Set(RegisterLastNameState)
	return tc.Send(`–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.
–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
`)
}

func cancelRegisterHandler(tc tele.Context, state fsm.Context) error {
	//menu := &tele.ReplyMarkup{}
	//menu.Reply(menu.Row(regBtn))
	//menu.ResizeKeyboard = true

	go state.Finish(true)
	return tc.Send("–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω. –í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
}
